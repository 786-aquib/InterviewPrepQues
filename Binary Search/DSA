[Problem Lik:-https://leetcode.com/problems/search-in-rotated-sorted-array/description/
Solution:-

]


/**********************************************************************************************/


[Problem Lik:-https://leetcode.com/problems/single-element-in-a-sorted-array/description/
Solution:-
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=nums.size();
       int low=0,hi=n-1;
       while(low<hi){
           int mid=(low+hi)/2;
           if(nums[mid]==nums[mid^1]){
               low = mid + 1;
           }else {
               hi = mid;
           }
       }
       return nums[low];
    }
};]


/**********************************************************************************************/


[Problem Link:-https://practice.geeksforgeeks.org/problems/find-nth-root-of-m5843/1
Solution:-
class Solution{
	public:
	int NthRoot(int n, int m){
	    // Code here.
	    int low = 1, high = m;
	    int ans = -1;
	    while(low <= high){
	       int mid = (low + high) / 2;
	        if(pow(mid, n) == m){
	             ans = mid;
	        }
	        if(pow(mid, n) < m){
	            low = mid + 1;
	        }else{
	            high = mid - 1;
	        }
	    }
	    return ans;
	}
};]

/**********************************************************************************************/

[problem Link:-https://leetcode.com/problems/koko-eating-bananas/description/
Solution:-
class Solution {
    bool good(vector<int>& piles, int num, int h){
       long long int checker = 0;
        for(int i=0;i<piles.size();i++){
            checker += (((piles[i]-1)/num) + 1);
        }
        return checker<=h;
    }
public:
   long long int minEatingSpeed(vector<int>& piles, int h) {
       long long int ans = *max_element(piles.begin(),piles.end());
       sort(piles.begin(),piles.end());
      long long int low = 1, high = ans;
       while(low <= high){
           long long int mid = (low + high)/2;
           if(good(piles, mid, h)){
               high = mid - 1;
               ans = min(ans, (long long)mid);
           }else{
               low = mid + 1;
           }
       }
       return ans;
    }
};]


/**********************************************************************************************/


[problem Link:-https://practice.geeksforgeeks.org/problems/median-in-a-row-wise-sorted-matrix1527/1
Solution:-
int countsmallerthanmid(vector<int> &row,int mid){
        int low=0;
        int high=row.size()-1;
        while(low<=high){
            int middle=(low+high)/2;
            if(row[middle]<=mid){
                low=middle+1;
            }
            else{
                high=middle-1;
            }
        }
        return low;
    }
    int median(vector<vector<int>> &matrix, int R, int C){
        int low=1;
        int high=2000;
        int median=low;
        int median_position=(R*C +1)/2;
        while(low<=high){
            int count=0;
            int mid=low+(high-low)/2;
            for(int i=0;i<R;i++){
                count+=countsmallerthanmid(matrix[i],mid);
            }
            if(count<median_position){
                low=mid+1;
                median=low;
            }
            else{
                if(count>=median_position){
                   high=mid-1;
                }
            }
        }
        return median;
    }]



    /**********************************************************************************************/

    [problem Link:-https://leetcode.com/problems/arranging-coins/description/
    Solution:-
    class Solution {
    long long int good(long long int num){
        return (num * (num + 1))/2;
    }
   public:
    long long int arrangeCoins(int n) {
       long long int low = 1, high = n;
        while(low <= high){
           long long int mid = (low + high)/2;
            if(good(mid) == n) return mid;
            // cout<<good(mid)<<' ';
            if(good(mid) < n){
                low = mid + 1;
            }else{
                high = mid - 1;
            }
        }
        return low - 1;
    }
};]

/**********************************************************************************************/


[Problem Link:-https://leetcode.com/problems/find-smallest-letter-greater-than-target/description/
Solution:-
class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        vector<int> idx;
        int t=target-'a';
        char ans = letters[0];
        for(int i=0;i<letters.size();i++){
            idx.push_back(letters[i]-'a');
        }
        int id = upper_bound(idx.begin(), idx.end(), t)-idx.begin();
        if(id != letters.size()){
            ans = letters[id];
        }
        return ans;
    }
};]

/**********************************************************************************************/

[problem Link:-https://leetcode.com/problems/house-robber-iv/description/
Solution:-
class Solution {
    bool good(vector<int>& nums, int mid, int k){
        int cnt = 0;
        int i=0;
        while(i<nums.size()){
            if(nums[i]<=mid){
                cnt++;
                i+=2;
            }else{
                i++;
            }
        }
        return cnt>=k;
    }
public:
    int minCapability(vector<int>& nums, int k) {
        int low = 1, high = *max_element(nums.begin(), nums.end());
        int ans = 1e9+1;
        while(low <= high){
            int mid = (low + high)/2;
            if(good(nums, mid, k)){
                high = mid - 1;
                ans = min(ans, mid);
            }else{
                low = mid + 1;
            }
        }
        return ans;
    }
};]



/**********************************************************************************************/

[Problem Link:-https://practice.geeksforgeeks.org/problems/counting-elements-in-two-arrays/1?page=1&category[]=Binary%20Search&sortBy=submissions
Solution:-
class Solution{
     int upper_bound(int arr[], int n, int x)
        {
            int low=0, high=n-1;
                int mid;
                while(low<=high){
                    mid=(low+high)/2;
                    if(arr[mid]<=x) low=mid+1;
                    else high=mid-1;
                }
                return low;
        }
  public:
    vector<int> countEleLessThanOrEqual(int arr1[], int arr2[], 
                                 int m, int n)
    {
    //Your code goes here
    vector<int> ans;
    sort(arr2, arr2+n);
    for(int i=0;i<m;i++){
        int ele = upper_bound(arr2, n, arr1[i]);
        ans.push_back(ele);
    }
    return ans;
    }
};]



/**********************************************************************************************/