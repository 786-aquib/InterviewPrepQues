[Problem Lik:-https://leetcode.com/problems/search-in-rotated-sorted-array/description/
Solution:-

]


/**********************************************************************************************/


[Problem Lik:-https://leetcode.com/problems/single-element-in-a-sorted-array/description/
Solution:-
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=nums.size();
       int low=0,hi=n-1;
       while(low<hi){
           int mid=(low+hi)/2;
           if(nums[mid]==nums[mid^1]){
               low = mid + 1;
           }else {
               hi = mid;
           }
       }
       return nums[low];
    }
};]


/**********************************************************************************************/


[Problem Link:-https://practice.geeksforgeeks.org/problems/find-nth-root-of-m5843/1
Solution:-
class Solution{
	public:
	int NthRoot(int n, int m){
	    // Code here.
	    int low = 1, high = m;
	    int ans = -1;
	    while(low <= high){
	       int mid = (low + high) / 2;
	        if(pow(mid, n) == m){
	             ans = mid;
	        }
	        if(pow(mid, n) < m){
	            low = mid + 1;
	        }else{
	            high = mid - 1;
	        }
	    }
	    return ans;
	}
};]

/**********************************************************************************************/

[problem Link:-https://leetcode.com/problems/koko-eating-bananas/description/
Solution:-
class Solution {
    bool good(vector<int>& piles, int num, int h){
       long long int checker = 0;
        for(int i=0;i<piles.size();i++){
            checker += (((piles[i]-1)/num) + 1);
        }
        return checker<=h;
    }
public:
   long long int minEatingSpeed(vector<int>& piles, int h) {
       long long int ans = *max_element(piles.begin(),piles.end());
       sort(piles.begin(),piles.end());
      long long int low = 1, high = ans;
       while(low <= high){
           long long int mid = (low + high)/2;
           if(good(piles, mid, h)){
               high = mid - 1;
               ans = min(ans, (long long)mid);
           }else{
               low = mid + 1;
           }
       }
       return ans;
    }
};]

/**********************************************************************************************/