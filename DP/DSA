/******************************************************************/
[Problem Link:-https://leetcode.com/problems/palindromic-substrings/
Solution:-
class Solution {
public:
    int countSubstrings(string s) {
        int n = s.size();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        int count = 0;
        / Palindrome len = 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
            count++;
        }
        // Palindrome len = 2
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
                count++;
            }
        }
        // Palindrome len > 2
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = len + i - 1;
                if (s[i] == s[j] && dp[i + 1][j - 1]) {
                    dp[i][j] = 1;
                    count++;
                }
            }
        }
        return count;
    }
};]


/******************************************************************/

[Problem Link:-https://practice.geeksforgeeks.org/problems/count-palindromic-subsequences/1
Solution:-
class Solution{
public:
    const long long int mod = 1000000007;
    long long int add(long long int x, long long int y) {
        return ((x % mod) + (y % mod)) % mod;
    }
    long long int sub(long long int x, long long int y) {
        return ((x % mod) - (y % mod) + mod) % mod;
    }
    long long int  countPS(string str)
    {
        long long int  N = str.length();

        // create a 2D array to store the count of palindromic
        // subsequence
        long long int  cps[N + 1][N + 1];
        memset(cps, 0 , sizeof(cps));

        // palindromic subsequence of length 1
        for (long long int  i = 0; i < N; i++)
            cps[i][i] = 1;

        // check subsequence of length L is palindrome or not
        for (long long int  L = 2; L <= N; L++)
        {
            for (long long int  i = 0; i <= N - L; i++)
            {
                long long int  k = L + i - 1;
                if (str[i] == str[k])
                    cps[i][k] = add(cps[i][k - 1] , add(cps[i + 1][k] , 1LL)) % mod;
                else
                    cps[i][k] = add(cps[i][k - 1] , sub(cps[i + 1][k] , cps[i + 1][k - 1])) % mod;
            }
        }

        // return total palindromic subsequence
        return cps[0][N - 1] % mod;
    }
};]



/******************************************************************/


[Problem Link:-https://practice.geeksforgeeks.org/problems/longest-palindrome-in-a-string1956/1
Solution:-
class Solution{
public:
    string longestPalindrome(string s){
        int n = s.size();
        int dp[n][n];
        int start = -1, end = -1;
        memset(dp, 0, sizeof(dp));
        int count = 0;
        // Palindrome len = 1
        bool f1=true;
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
            count = 1;
            if(f1){
                start = i;
                end = i;
                f1=false;
            }
        }
        // Palindrome len = 2
        bool f=true;
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
                count = 2;
                if(f){
                    start = i;
                    end = i+1;
                    f=false;
                }
            }
        }
        // Palindrome len > 2
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = len + i - 1;
                if (s[i] == s[j] && dp[i + 1][j - 1]) {
                    dp[i][j] = 1;
                    if(j-i+1 > count){
                        count = j-i+1;
                        start = i;
                        end = j;
                    }
                }
            }
        }
        string ans = "";
        for(int i=start;i<=end;i++) ans += s[i];
        return ans;
    }
};]




/******************************************************************/



[Problem Link:-https://leetcode.com/problems/burst-balloons/description/
Solution:-
class Solution {
public:
    int maxCoins(vector<int>& b) {


        int n = b.size();
        vector <int> g ; 
        g.push_back(1);
        int i = 0 ; 
        while(i<n){
            g.push_back(b[i]);
            i++;
        }
        g.push_back(1);

        vector<vector<int>> dp(n+5, vector <int> (n+5,0));

        i = 1;
        while(i<=n){
            dp[i][i] = g[i-1]*g[i]*g[i+1];
            i++;
        }

        int length = 2 ; //finding for all subarrays of length givn 
        while(length<=n){

            i = 1 ; 
            int j = i + length - 1 ; 
            //i--->start point of subarray 
            //j--->end point of subarray 

            while(j<=n){

                //dp[i][j] is best answer for subarray starting from index i and ending at j
                int ii = INT_MIN ; 
                int k = i ; //k-->last element u decide to destroy  
                while(k<=j){
                    int possibility = g[i-1]*g[k]*g[j+1]  ;


                    if(i<=k-1){
                        possibility+=(dp[i][k-1]);
                    } 

                    if(k+1<=j){
                        possibility+=(dp[k+1][j]);
                    }

                    ii = max(ii,possibility);
                    k++;
                }

                dp[i][j] = ii ; 

                i++;j++;
            }
            length++;
        }
        return dp[1][n]; 

    }
};]


/******************************************************************/


[Problem Link:-https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1
class Solution
Solution:-
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
  int knapSack(int W, int wt[], int val[], int n) 
    { 
        int dp[1001][1001];
       for(int i=0;i<=W;i++){
           dp[0][i] =0;
       }
       for(int j=0; j<=n;j++){
           dp[j][0] =0;
       }
       for(int i=1;i<=n;i++){
           for(int j=1;j<=W;j++){
               if(wt[i-1]<=j){
                   dp[i][j] = max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
               }
               else{
                   dp[i][j] = dp[i-1][j];
               }
           }
       }
       return dp[n][W];
    }
};]