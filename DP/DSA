/******************************************************************/
[Problem Link:-https://leetcode.com/problems/palindromic-substrings/
Solution:-
class Solution {
public:
    int countSubstrings(string s) {
        int n = s.size();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        int count = 0;
        / Palindrome len = 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
            count++;
        }
        // Palindrome len = 2
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
                count++;
            }
        }
        // Palindrome len > 2
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = len + i - 1;
                if (s[i] == s[j] && dp[i + 1][j - 1]) {
                    dp[i][j] = 1;
                    count++;
                }
            }
        }
        return count;
    }
};]


/******************************************************************/

[Problem Link:-https://practice.geeksforgeeks.org/problems/count-palindromic-subsequences/1
Solution:-
class Solution{
public:
    const long long int mod = 1000000007;
    long long int add(long long int x, long long int y) {
        return ((x % mod) + (y % mod)) % mod;
    }
    long long int sub(long long int x, long long int y) {
        return ((x % mod) - (y % mod) + mod) % mod;
    }
    long long int  countPS(string str)
    {
        long long int  N = str.length();

        // create a 2D array to store the count of palindromic
        // subsequence
        long long int  cps[N + 1][N + 1];
        memset(cps, 0 , sizeof(cps));

        // palindromic subsequence of length 1
        for (long long int  i = 0; i < N; i++)
            cps[i][i] = 1;

        // check subsequence of length L is palindrome or not
        for (long long int  L = 2; L <= N; L++)
        {
            for (long long int  i = 0; i <= N - L; i++)
            {
                long long int  k = L + i - 1;
                if (str[i] == str[k])
                    cps[i][k] = add(cps[i][k - 1] , add(cps[i + 1][k] , 1LL)) % mod;
                else
                    cps[i][k] = add(cps[i][k - 1] , sub(cps[i + 1][k] , cps[i + 1][k - 1])) % mod;
            }
        }

        // return total palindromic subsequence
        return cps[0][N - 1] % mod;
    }
};]






[Problem Link:-https://practice.geeksforgeeks.org/problems/longest-palindrome-in-a-string1956/1
Solution:-
class Solution{
public:
    string longestPalindrome(string s){
        int n = s.size();
        int dp[n][n];
        int start = -1, end = -1;
        memset(dp, 0, sizeof(dp));
        int count = 0;
        // Palindrome len = 1
        bool f1=true;
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
            count = 1;
            if(f1){
                start = i;
                end = i;
                f1=false;
            }
        }
        // Palindrome len = 2
        bool f=true;
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
                count = 2;
                if(f){
                    start = i;
                    end = i+1;
                    f=false;
                }
            }
        }
        // Palindrome len > 2
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = len + i - 1;
                if (s[i] == s[j] && dp[i + 1][j - 1]) {
                    dp[i][j] = 1;
                    if(j-i+1 > count){
                        count = j-i+1;
                        start = i;
                        end = j;
                    }
                }
            }
        }
        string ans = "";
        for(int i=start;i<=end;i++) ans += s[i];
        return ans;
    }
};]