

/*--------------------------------------------------------------------------------------------------*/


[Problem Link:-https://practice.geeksforgeeks.org/problems/minimum-platforms-1587115620/1
Solution:-
class Solution{
    public:
   int findPlatform(int arr[], int dep[], int n){
     // Your code here
     int ans=0;
        sort(arr,arr+n);
        sort(dep,dep+n);
        int j=0;
        for(int i=0;i<n;++i){
            if(arr[i]<=dep[j]){
                ans++;
            }
            else{
                j++;
            }
        }
        return ans;
    }
};]


/*--------------------------------------------------------------------------------------------------*/


[Problem Link:-https://www.geeksforgeeks.org/buy-maximum-stocks-stocks-can-bought-th-day/
Solution:-
int buyMaximumProducts(int n, int k, int price[]){
    vector<pair<int, int> > v;
    // Making pair of product cost and number
    // of day..
    for (int i = 0; i < n; ++i)
        v.push_back(make_pair(price[i], i + 1));   
    // Sorting the vector pair.
    sort(v.begin(), v.end());
    // Calculating the maximum number of stock
    // count.
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        ans += min(v[i].second, k / v[i].first);
        k -= v[i].first * min(v[i].second, (k / v[i].first));
    }
    return ans;
}]

/*--------------------------------------------------------------------------------------------------*/


[Problem Link:-https://practice.geeksforgeeks.org/problems/maximum-product-subset-of-an-array/1
Solution:-
class Solution{
    public:
    long long int findMaxProduct(vector<int>&a, int n){
        vector<int> neg;
        bool f=true;
        int count=0;
        long long prod=1;
        for(int i=0;i<n;i++){
            if(a[i]<0) neg.push_back(a[i]);
             if(a[i]>0){
                prod=(prod*a[i])%1000000007;
                f=false;
            }
            if(a[i]==0){
                count++;
            }
        }
        if(n==1){
            return a[0];
        }
       else if(count == n){
            prod=0;
            }
        else if(neg.size()==1 && count==n-1)
            prod=0;
       else if(neg.size()%2==0){
            for(auto x : neg){
                prod=(prod*x)%1000000007;
            }
        }else{
            sort(neg.begin(),neg.end());
            reverse(neg.begin(),neg.end());
            for(int i=1;i<neg.size();i++){
                prod=(prod*neg[i])%1000000007;
            }
        }
        return prod;
    }
};]



/*--------------------------------------------------------------------------------------------------*/



