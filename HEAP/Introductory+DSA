#include <bits/stdc++.h>
using namespace std;
int b[100];
int sz = 0 ; //size of heap
void insert(int numbr){
    if(sz==0){
        b[1] = numbr ;
        sz = 1 ; //size become 1 now
    } else {
        sz++;
        b[sz] = numbr ;
        //now do the process of putting the numbr in ints right position in heap
        int child = sz ;
        int parent = int(sz/2) ;
        while(parent>=1 && b[parent]>b[child]){
            swap(b[parent],b[child]);
            child = parent ;
            parent = int(child/2);
        }
        //takes O(logN) time
    }
}
void del(){
     //delete the minimum element of heap
     //takes O(logN) time
     //in short we have to remove element at b[1]
    if(sz>=2){
            swap(b[1],b[sz]);
            b[sz] = 0 ;
            sz -- ;
            int parent = 1 ;
            int child1 = 2 ;
            int child2 = 3 ;
            while(  (child1<=sz && b[parent]>child1) || (child2<=sz && b[parent]>child2) ){
                if(child1<child2){
                    swap(b[parent],b[child1]);
                }
                else{
                    swap(b[parent],b[child2]);
                }
                  }
                    }
            else if(sz==1){
                b[1] = 0 ;
                sz = 0 ;
            }
            else {
                cout<<"Heap is empty no more element can be removed";
            }
}
int main() {
    int g ;
    cin>>g ;
    int  i = 1 ;
    while(i<=g){
        int y ;
        cin>>y ;
        if(y==1){
            //do insert operation in heap
           int numbr ;
            cin>>numbr ;
            //insert numbr in heap
            insert(numbr);
        }
        else if(y==2){
            //asking for the minimum element of heap which is nothing but first element of array
            //takes O(1) time
            if(sz>=1){
                cout<<b[1] ;
            }
            else {
                cout<<"Heap is empty";
            }
            cout<<'\n';
        } else {
            //delete the minimum element of heap
            //takes O(logN) time
            // in short we have to remove element at b[1]
            del();
        }
        i++;
    }
    return 0 ;
}