/***************************************************************************************/

[Problem Link:-https://www.geeksforgeeks.org/find-frequency-number-array/
Solution:-
Not use always Array of size  that we needed it take a lot space..
Hashing introduce here. So we use hashing And store the frequecy;
// CPP program to answer queries for frequencies
// in O(1) time.
#include <bits/stdc++.h>
using namespace std;

unordered_map<int, int> hm;

void countFreq(int a[], int n)
{
// Insert elements and their
// frequencies in hash map.
for (int i=0; i<n; i++)
hm[a[i]]++;
}

// Return frequency of x (Assumes that
// countFreq() is called before)
int query(int x)
{
return hm[x];
}

// Driver program
int main()
{
int a[] = {1, 3, 2, 4, 2, 1};
int n = sizeof(a)/sizeof(a[0]);
countFreq(a, n);
cout << query(2) << endl;
cout << query(3) << endl;
cout << query(5) << endl;
return 0;
}]


/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/two-sum/
Solution:-
class Solution {
    public:
        vector<int> twoSum(vector<int>& nums, int target) {
           vector<int> result;
            for (int i = 0; i < nums.size(); i++){
                for (int j = i+1; j< nums.size(); j++){
                    if ( nums[i] + nums[j] == target)
                        result = {i,j};
                }
            }
         return result; 
        }
    };]


/***************************************************************************************/


[Problem Link:-https://www.spoj.com/problems/CSUMQ/
Solution:-
void solve(int *arr, int n, int l, int r)
{
    vector<int> prefixSum(n, 0);
    for (int i = 0; i < n; i++)
    {
        prefixSum[i] = prefixSum[i - 1] + arr[i];
    }

    cout << "The sum is " << prefixSum[r] - prefixSum[l - 1] << endl;
}]


/***************************************************************************************/