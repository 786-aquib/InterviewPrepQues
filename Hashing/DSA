/***************************************************************************************/

[Problem Link:-https://www.geeksforgeeks.org/find-frequency-number-array/
Solution:-
Not use always Array of size  that we needed it take a lot space..
Hashing introduce here. So we use hashing And store the frequecy;
// CPP program to answer queries for frequencies
// in O(1) time.
#include <bits/stdc++.h>
using namespace std;

unordered_map<int, int> hm;

void countFreq(int a[], int n)
{
// Insert elements and their
// frequencies in hash map.
for (int i=0; i<n; i++)
hm[a[i]]++;
}

// Return frequency of x (Assumes that
// countFreq() is called before)
int query(int x)
{
return hm[x];
}

// Driver program
int main()
{
int a[] = {1, 3, 2, 4, 2, 1};
int n = sizeof(a)/sizeof(a[0]);
countFreq(a, n);
cout << query(2) << endl;
cout << query(3) << endl;
cout << query(5) << endl;
return 0;
}]


/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/two-sum/
Solution:-
class Solution {
    public:
        vector<int> twoSum(vector<int>& nums, int target) {
           vector<int> result;
            for (int i = 0; i < nums.size(); i++){
                for (int j = i+1; j< nums.size(); j++){
                    if ( nums[i] + nums[j] == target)
                        result = {i,j};
                }
            }
         return result; 
        }
    };]


/***************************************************************************************/


[Problem Link:-https://www.spoj.com/problems/CSUMQ/
Solution:-
void solve(int *arr, int n, int l, int r)
{
    vector<int> prefixSum(n, 0);
    for (int i = 0; i < n; i++)
    {
        prefixSum[i] = prefixSum[i - 1] + arr[i];
    }

    cout << "The sum is " << prefixSum[r] - prefixSum[l - 1] << endl;
}]


/***************************************************************************************/

[Problem Link:-https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/
Solution:-
int maxDistance(int arr[], int n){
    // Used to store element to first index mapping
    unordered_map<int, int> mp;
    // Traverse elements and find maximum distance between
    // same occurrences with the help of map.
    int max_dist = 0;
    for (int i=0; i<n; i++){
        // If this is first occurrence of element, insert its
        // index in map
        if (mp.find(arr[i]) == mp.end())
            mp[arr[i]] = i;
    // Else update max distance
        else
            max_dist = max(max_dist, i - mp[arr[i]]);
    }
    return max_dist;
}]


/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/first-unique-character-in-a-string/
Solution:-
class Solution {
    public:
        int firstUniqChar(string s) {
            //put everything in a map
            map<char,int>mp;
            int ans = -1;
            for(auto it: s){
                map<char,int>::iterator iter = mp.find(it);
                if(iter == mp.end()){
                    //add to map
                    mp.emplace(it,0);
                }
                else{
                    mp[it]++;
                    //increment by 1 at map location
                }
            }
            int index = 0;
            for(auto it: s){
                map<char,int>::iterator iter = mp.find(it);
                if(iter->second == 0) return index;
                index++;
            }
            return -1;
        }
    };]


/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/find-common-characters/
Solution:-
class Solution {
    public:
        vector<string> commonChars(vector<string>& words) {
      vector<int> ans_freq(26, INT_MAX);
      int n=words.size();
      for (int i = 0; i < n; i++){
        vector<int> freq(26,0);
        string word = words[i];
        for (int j = 0; j < word.size(); j++)
          freq[word[j] - 'a']++;
        for (int j = 0; j < 26; j++)
          ans_freq[j] = min(ans_freq[j], freq[j]);
      }
       vector<string> ans;
      for (int i = 0; i < 26; i++){
        while (ans_freq[i] != 0){
          string s="";
          char c = 'a' + i;
          s=s+c;
          ans.push_back(s);
          ans_freq[i]--;
        }
      }
        return ans;
        }
    };]

    /***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/longest-consecutive-sequence/
Solution:-
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
         unordered_map<int, bool> present, checked;
         int longestSize=0;
         for(int i=0;i<nums.size();i++){
             present[nums[i]]=true;
         }
         for(int i=0;i<nums.size();i++){
             if(!checked[nums[i]]){
                 if(present[nums[i]-1]){
                   checked[nums[i]]=true;
                 }else{
                    int size=0;
                    int checker=nums[i];
                    while(present[checker]){
                          size++;
                          checker++;
                    }
                    longestSize=max(longestSize,size);
                 }
             }
         }
         return longestSize;

    }
};]

/***************************************************************************************/


[Problem Link:-https://www.geeksforgeeks.org/find-the-largest-subarray-with-0-sum/
Solution:-
class Solution{
    public:
    int maxLen(vector<int>&A, int n){
        unordered_map<int,int> Present;
        int longestSize=0;
        for(int i=1;i<n;i++){
            A[i]+=A[i-1];
        }
        for(int i=0;i<n;i++){
        	if(A[i]==0){
        		longestSize=max(longestSize,i+1);
        	}
        }
        for(int i=0;i<n;i++){
            if(!Present[A[i]]){
                Present[A[i]]=i+1;
            }else{
                int CurrentSize=i-Present[A[i]]+1;
                longestSize=max(longestSize,CurrentSize);
            }
        }
        return longestSize;
    }
};]


/***************************************************************************************/


[Problem Link:-https://leetcode.com/problems/continuous-subarray-sum/
Solution:-
class Solution {
public:
    bool checkSubarraySum(vector<int>& A, int k) {
        unordered_map<int,int> Present;
        int longestSize=0;
        int n=A.size();
        for(int i=1;i<n;i++){
            A[i]+=A[i-1];
            A[i]%=k;
        }
        A[0]%=k;
        // debug(A);
       for(int i=0;i<n;i++){
           if(i!=0 && A[i]==0){
               return true;
           }
       	if(!Present[A[i]]){
       		Present[A[i]]=i+1;
       	}else{
       		if((i+1)-Present[A[i]]>=2){
       			return true;
       		}
       	}
       }
       return false;
    }
};]

/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/continuous-subarray-sum/
Solution:-
class Solution {
public:
    bool checkSubarraySum(vector<int>& A, int k) {
        unordered_map<int,int> Present;
        int longestSize=0;
        int n=A.size();
        for(int i=1;i<n;i++){
            A[i]+=A[i-1];
            A[i]%=k;
        }
        A[0]%=k;
        // debug(A);
       for(int i=0;i<n;i++){
           if(i!=0 && A[i]==0){
               return true;
           }
       	if(!Present[A[i]]){
       		Present[A[i]]=i+1;
       	}else{
       		if((i+1)-Present[A[i]]>=2){
       			return true;
       		}
       	}
       }
       return false;
    }
};]


/***************************************************************************************/


[Problem Link:-https://leetcode.com/problems/brick-wall/description/
Solution:-
class Solution {
public:
    int leastBricks(vector<vector<int>>& wall) {
        unordered_map<int,int> mp;
        for(int i=0;i<wall.size();i++){
            int sum=0;
            for(int j=0;j<wall[i].size()-1;j++){
                sum+=wall[i][j];
                mp[sum]++;
            }
        }
        int maxSpaces=0;
        for(auto x :mp){
            maxSpaces=max(maxSpaces,x.second);
        }
        int ans=abs((int)wall.size()-maxSpaces);
        return ans;
    }
};]


/***************************************************************************************/


[Problem Link:-https://leetcode.com/problems/subarray-sum-equals-k/
Solution:-
class Solution {
public:
    int subarraySum(vector<int>& arr, int k) {
        int n = arr.size(); // take the size of the array
        int prefix[n]; // make a prefix array to store prefix sum
        prefix[0] = arr[0]; // for element at index at zero, it is same
        // making our prefix array
        for(int i = 1; i < n; i++){
            prefix[i] = arr[i] + prefix[i - 1];
        }
        unordered_map<int,int> mp; // declare an unordered map
        int ans = 0; // to store the number of our subarrays having sum as 'k'
        for(int i = 0; i < n; i++){ // traverse from the prefix array
            if(prefix[i] == k) // if it already becomes equal to k, then increment ans
                ans++;
            // now, as we discussed find whether (prefix[i] - k) present in map or not
            if(mp.find(prefix[i] - k) != mp.end()){
                ans += mp[prefix[i] - k]; // if yes, then add it our answer
            }
            mp[prefix[i]]++; // put prefix sum into our map
        }
        return ans; // and at last, return our answer
    }
};]


/***************************************************************************************/

[Problem Link:-https://www.interviewbit.com/problems/subarray-with-given-xor/
Solution:-
int Solution::solve(vector<int> &A, int k) {
     unordered_map<int,int> Present;
     int n=A.size();
        int longestSize=0;
        for(int i=1;i<n;i++){
           A[i]^=A[i-1];
        }
       for(int i=0;i<n;i++){
       	if(!Present[k^A[i]]){
       		Present[A[i]]++;
       	}else{
       		longestSize+=Present[k^A[i]];
               Present[A[i]]++;
       	}
       }
       for(int i=0;i<n;i++){
       	if(A[i]==k) longestSize++;
       }
       return longestSize;
}]


/***************************************************************************************/

[Problem Link:-https://www.geeksforgeeks.org/smallest-subarray-with-sum-k-from-an-array/
Solution:-
int smallestSubarraySumK(vector<int> & arr, int k ){
    // Use map here to store the prefixSum ending
    // at ith index.
    unordered_map<long long, int> unmap;
    int n = arr.size();
    // Store the current Prefix sum till ith index;
    long long currPrefixSum = 0;
    // Store the minimum size subarray whose sum is K
    long long result = INT_MAX;
    for(int i = 0; i < n; i++){
        currPrefixSum += arr[i];
        // Check if the current prefix sum is equals to K
        if(currPrefixSum == k){
            long long currLen = i + 1;
            result = min(result, currLen);
        }
        // Required PrefixSum
        long long requirePrefixSum
            = currPrefixSum - k;
        // Check if there exist any required
        // Prefix Sum or not
        if(unmap.count(requirePrefixSum)){
            long long foundIdx =
                unmap[requirePrefixSum];
            long long currIdx = i;
            result = min(result,
                           currIdx - foundIdx);
        }
        // Store the current prefix sum ending
        // at i
        unmap[currPrefixSum] = i;
    }
    if(result >= INT_MAX) return -1;
    // return the result
    return result;
}]


/***************************************************************************************/


[Problem Link:-https://practice.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
Solution:-
class Solution {
  public:
    int lenOfLongSubarr(int A[],  int N, int K){
        int ans=0;
        int sum=0;
        unordered_map<int,int> preSum;
        preSum.insert({0,-1});
        for(int i=0;i<N;i++) {
            sum+=A[i];
            if(preSum.find(sum-K)!=preSum.end())
                ans=max(i-preSum[sum-K],ans);
            if(preSum.find(sum)==preSum.end())
                preSum.insert({sum,i});
        }
        return ans;
    }
};]


/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/description/
Solution:-
class Solution {
public:
    int longestPalindrome(vector<string>& words) {
        int ans=0;
        bool odd=false;
        unordered_map<string,int>m;
        for(string&word:words){
            m[word]++;
        }
        for(int i=0;i<words.size();i++){
            string rev="";
            rev+=words[i][1];
            rev+=words[i][0];
            if(rev!=words[i]){
                if(m.count(rev)){
                    ans+=(min(1,(min(m[rev],m[words[i]])))*4);
                    m[rev]>0?m[rev]--:true;
                    m[words[i]]>0?m[words[i]]--:true;
                }
            }
            else{
                ans+=(m[rev]/2)*4;
                m[rev]%=2;
                if(m[rev]==1){
                    odd=true;
                }
            }
        }
        odd?ans+=2:true;
        return ans ;
    }
};]



/***************************************************************************************/




[Problem Link:-https://leetcode.com/problems/count-number-of-pairs-with-absolute-difference-k/description/
Solution:-
Brute force:-
class Solution {
public:
    int countKDifference(vector<int>& nums, int k) {
        int n=nums.size();
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                 if(nums[i]-nums[j]==k || nums[j]-nums[i]==k){
                     ans++;
                 }
            }
        }
        return ans;
    }
};
Optimal:-
class Solution {
public:
    int countKDifference(vector<int>& nums, int k) {
        int n=nums.size();
        int ans=0;
        bool f=false;
       unordered_map<int,int> mp;
       for(int i=0;i<n;i++){
           if(mp[nums[i]+k]){
               ans+=mp[nums[i]+k];
           }
           if(mp[nums[i]-k]){
               ans+=mp[nums[i]-k];
           }
           mp[nums[i]]++;
       }
       return ans;
    }
};]

/***************************************************************************************/


[Problem Link:-https://leetcode.com/problems/range-sum-query-2d-immutable/description/
Solution:-    [[[[Prefix Sum in 2-D matrix]]]];
class NumMatrix {
public:
     vector<vector<int>> PrefixSum;
    NumMatrix(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
          PrefixSum.resize(m+1);
          for(int i=0;i<=m;i++){
              PrefixSum[i].resize(n+1,0);
              for(int j=0;j<=n;j++){
                  if(i==0 || j==0) continue;
                  else{
                     PrefixSum[i][j]=PrefixSum[i][j-1]+PrefixSum[i-1][j]-PrefixSum[i-1][j-1]+matrix[i-1][j-1];
                  }
              }
          }
    }
    int sumRegion(int row1, int col1, int row2, int col2) {
         row1++;col1++;row2++;col2++;
         return PrefixSum[row2][col2]-PrefixSum[row2][col1-1]-PrefixSum[row1-1][col2]+PrefixSum[row1-1][col1-1];
    }
};]


/***************************************************************************************/

