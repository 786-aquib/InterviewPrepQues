/***************************************************************************************/

[Problem Link:-https://www.geeksforgeeks.org/find-frequency-number-array/
Solution:-
Not use always Array of size  that we needed it take a lot space..
Hashing introduce here. So we use hashing And store the frequecy;
// CPP program to answer queries for frequencies
// in O(1) time.
#include <bits/stdc++.h>
using namespace std;

unordered_map<int, int> hm;

void countFreq(int a[], int n)
{
// Insert elements and their
// frequencies in hash map.
for (int i=0; i<n; i++)
hm[a[i]]++;
}

// Return frequency of x (Assumes that
// countFreq() is called before)
int query(int x)
{
return hm[x];
}

// Driver program
int main()
{
int a[] = {1, 3, 2, 4, 2, 1};
int n = sizeof(a)/sizeof(a[0]);
countFreq(a, n);
cout << query(2) << endl;
cout << query(3) << endl;
cout << query(5) << endl;
return 0;
}]


/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/two-sum/
Solution:-
class Solution {
    public:
        vector<int> twoSum(vector<int>& nums, int target) {
           vector<int> result;
            for (int i = 0; i < nums.size(); i++){
                for (int j = i+1; j< nums.size(); j++){
                    if ( nums[i] + nums[j] == target)
                        result = {i,j};
                }
            }
         return result; 
        }
    };]


/***************************************************************************************/


[Problem Link:-https://www.spoj.com/problems/CSUMQ/
Solution:-
void solve(int *arr, int n, int l, int r)
{
    vector<int> prefixSum(n, 0);
    for (int i = 0; i < n; i++)
    {
        prefixSum[i] = prefixSum[i - 1] + arr[i];
    }

    cout << "The sum is " << prefixSum[r] - prefixSum[l - 1] << endl;
}]


/***************************************************************************************/

[Problem Link:-https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/
Solution:-
int maxDistance(int arr[], int n){
    // Used to store element to first index mapping
    unordered_map<int, int> mp;
    // Traverse elements and find maximum distance between
    // same occurrences with the help of map.
    int max_dist = 0;
    for (int i=0; i<n; i++){
        // If this is first occurrence of element, insert its
        // index in map
        if (mp.find(arr[i]) == mp.end())
            mp[arr[i]] = i;
    // Else update max distance
        else
            max_dist = max(max_dist, i - mp[arr[i]]);
    }
    return max_dist;
}]


/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/first-unique-character-in-a-string/
Solution:-
class Solution {
    public:
        int firstUniqChar(string s) {
            //put everything in a map
            map<char,int>mp;
            int ans = -1;
            for(auto it: s){
                map<char,int>::iterator iter = mp.find(it);
                if(iter == mp.end()){
                    //add to map
                    mp.emplace(it,0);
                }
                else{
                    mp[it]++;
                    //increment by 1 at map location
                }
            }
            int index = 0;
            for(auto it: s){
                map<char,int>::iterator iter = mp.find(it);
                if(iter->second == 0) return index;
                index++;
            }
            return -1;
        }
    };]


/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/find-common-characters/
Solution:-
class Solution {
    public:
        vector<string> commonChars(vector<string>& words) {
      vector<int> ans_freq(26, INT_MAX);
      int n=words.size();
      for (int i = 0; i < n; i++){
        vector<int> freq(26,0);
        string word = words[i];
        for (int j = 0; j < word.size(); j++)
          freq[word[j] - 'a']++;
        for (int j = 0; j < 26; j++)
          ans_freq[j] = min(ans_freq[j], freq[j]);
      }
       vector<string> ans;
      for (int i = 0; i < 26; i++){
        while (ans_freq[i] != 0){
          string s="";
          char c = 'a' + i;
          s=s+c;
          ans.push_back(s);
          ans_freq[i]--;
        }
      }
        return ans;
        }
    };]

    /***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/longest-consecutive-sequence/
Solution:-
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
         unordered_map<int, bool> present, checked;
         int longestSize=0;
         for(int i=0;i<nums.size();i++){
             present[nums[i]]=true;
         }
         for(int i=0;i<nums.size();i++){
             if(!checked[nums[i]]){
                 if(present[nums[i]-1]){
                   checked[nums[i]]=true;
                 }else{
                    int size=0;
                    int checker=nums[i];
                    while(present[checker]){
                          size++;
                          checker++;
                    }
                    longestSize=max(longestSize,size);
                 }
             }
         }
         return longestSize;

    }
};]

/***************************************************************************************/


[Problem Link:-https://www.geeksforgeeks.org/find-the-largest-subarray-with-0-sum/
Solution:-
class Solution{
    public:
    int maxLen(vector<int>&A, int n){
        unordered_map<int,int> Present;
        int longestSize=0;
        for(int i=1;i<n;i++){
            A[i]+=A[i-1];
        }
        for(int i=0;i<n;i++){
        	if(A[i]==0){
        		longestSize=max(longestSize,i+1);
        	}
        }
        for(int i=0;i<n;i++){
            if(!Present[A[i]]){
                Present[A[i]]=i+1;
            }else{
                int CurrentSize=i-Present[A[i]]+1;
                longestSize=max(longestSize,CurrentSize);
            }
        }
        return longestSize;
    }
};]


/***************************************************************************************/


[Problem Link:-https://leetcode.com/problems/continuous-subarray-sum/
Solution:-
class Solution {
public:
    bool checkSubarraySum(vector<int>& A, int k) {
        unordered_map<int,int> Present;
        int longestSize=0;
        int n=A.size();
        for(int i=1;i<n;i++){
            A[i]+=A[i-1];
            A[i]%=k;
        }
        A[0]%=k;
        // debug(A);
       for(int i=0;i<n;i++){
           if(i!=0 && A[i]==0){
               return true;
           }
       	if(!Present[A[i]]){
       		Present[A[i]]=i+1;
       	}else{
       		if((i+1)-Present[A[i]]>=2){
       			return true;
       		}
       	}
       }
       return false;
    }
};]

/***************************************************************************************/

[Problem Link:-https://leetcode.com/problems/continuous-subarray-sum/
Solution:-
class Solution {
public:
    bool checkSubarraySum(vector<int>& A, int k) {
        unordered_map<int,int> Present;
        int longestSize=0;
        int n=A.size();
        for(int i=1;i<n;i++){
            A[i]+=A[i-1];
            A[i]%=k;
        }
        A[0]%=k;
        // debug(A);
       for(int i=0;i<n;i++){
           if(i!=0 && A[i]==0){
               return true;
           }
       	if(!Present[A[i]]){
       		Present[A[i]]=i+1;
       	}else{
       		if((i+1)-Present[A[i]]>=2){
       			return true;
       		}
       	}
       }
       return false;
    }
};]


/***************************************************************************************/


