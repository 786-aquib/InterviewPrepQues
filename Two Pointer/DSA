[Problem Link:-https://leetcode.com/problems/two-sum/description/
Solution:-
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
     int high=nums.size()-1;
     int low=0;
     vector<int>v;
     vector<int>temp;
     for(int i=0;i<nums.size();i++){
      temp.push_back(nums[i]);
     }
     sort(nums.begin(),nums.end());
     while(low<=high){
      if(nums[low]+nums[high]==target){
        break;
      }
      else if(nums[low]+nums[high]>target){
          high--;
      }
      else if(nums[low]+nums[high]<target){
          low++;
      }
  }
  for(int i=0;i<nums.size();i++){
      if(temp[i]==nums[low]){
          v.push_back(i);
      }
      else if(temp[i]==nums[high]){
          v.push_back(i);
      }
  }
  return v;
    }
};]


/********************************************************************************************/


[problem Link:-https://practice.geeksforgeeks.org/problems/find-the-closest-pair-from-two-arrays4215/1
Solution:-
 class Solution{
  public:
    vector<int> printClosest(int arr[], int brr[], int n, int m, int x) {
        //code here
        vector<int> ans;
        int diff=INT_MAX;
        int i=0,j=m-1;
        while(i<n && j>=0){
             int sum=arr[i]+brr[j];
             if(diff>abs(sum-x)){
                 diff=abs(sum-x);
                 ans={arr[i],brr[j]};
             }
             if(sum>=x){
                 j--;
             }
             else{
                 i++;
             }
        }
        return ans;
    }
};]


/********************************************************************************************/


[Problem Link:-https://leetcode.com/problems/squares-of-a-sorted-array/
Solution:-
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> ans;
       int i=-1,j=0;
       for(int k=0;k<nums.size();k++){
           if(nums[k]<0) i=k;
       }
       j=i+1;
        while(i>=0 && j<nums.size()){
            if(-1*nums[i]>=nums[j]){
                ans.push_back(nums[j]*nums[j]); j++;
            }
            else {
                ans.push_back(nums[i]*nums[i]); i--;
            }
        }
        while(j<nums.size()){
            ans.push_back(nums[j]*nums[j]); j++;
        }
        while(i>=0){
            ans.push_back(nums[i]*nums[i]); i--;
        }
        return ans;
    }
};]



/********************************************************************************************/



[Problem Link:-
Solution:-
]

