[Problem Link:-https://leetcode.com/problems/two-sum/description/
Solution:-
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
     int high=nums.size()-1;
     int low=0;
     vector<int>v;
     vector<int>temp;
     for(int i=0;i<nums.size();i++){
      temp.push_back(nums[i]);
     }
     sort(nums.begin(),nums.end());
     while(low<=high){
      if(nums[low]+nums[high]==target){
        break;
      }
      else if(nums[low]+nums[high]>target){
          high--;
      }
      else if(nums[low]+nums[high]<target){
          low++;
      }
  }
  for(int i=0;i<nums.size();i++){
      if(temp[i]==nums[low]){
          v.push_back(i);
      }
      else if(temp[i]==nums[high]){
          v.push_back(i);
      }
  }
  return v;
    }
};]


/********************************************************************************************/


[problem Link:-https://practice.geeksforgeeks.org/problems/find-the-closest-pair-from-two-arrays4215/1
Solution:-
 class Solution{
  public:
    vector<int> printClosest(int arr[], int brr[], int n, int m, int x) {
        //code here
        vector<int> ans;
        int diff=INT_MAX;
        int i=0,j=m-1;
        while(i<n && j>=0){
             int sum=arr[i]+brr[j];
             if(diff>abs(sum-x)){
                 diff=abs(sum-x);
                 ans={arr[i],brr[j]};
             }
             if(sum>=x){
                 j--;
             }
             else{
                 i++;
             }
        }
        return ans;
    }
};]


/********************************************************************************************/


[Problem Link:-https://leetcode.com/problems/squares-of-a-sorted-array/
Solution:-
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> ans;
       int i=-1,j=0;
       for(int k=0;k<nums.size();k++){
           if(nums[k]<0) i=k;
       }
       j=i+1;
        while(i>=0 && j<nums.size()){
            if(-1*nums[i]>=nums[j]){
                ans.push_back(nums[j]*nums[j]); j++;
            }
            else {
                ans.push_back(nums[i]*nums[i]); i--;
            }
        }
        while(j<nums.size()){
            ans.push_back(nums[j]*nums[j]); j++;
        }
        while(i>=0){
            ans.push_back(nums[i]*nums[i]); i--;
        }
        return ans;
    }
};]



/********************************************************************************************/



[Problem Link:-https://www.geeksforgeeks.org/number-subarrays-sum-less-k/
Solution:-
int countSubarrays(int arr[], int n, int k){
    int start = 0, end = 0,
        count = 0, sum = arr[0];
    while (start < n && end < n) {
        // If sum is less than k,
        // move end by one position.
        // Update count and sum
        // accordingly.
        if (sum < k) {
            end++;
            if (end >= start)
                count += end - start;
            // For last element,
            // end may become n
            if (end < n)
                sum += arr[end];
        }
        // If sum is greater than or
        // equal to k, subtract
        // arr[start] from sum and
        // decrease sliding window by
        // moving start by one position
        else {
            sum -= arr[start];
            start++;
        }
    }
    return count;
}]


/********************************************************************************************/



[Problem Link:-https://www.geeksforgeeks.org/count-pairs-array-whose-sum-less-x/
Solution:-
int findPairs(int arr[],int n,int x){
    int l = 0, r = n-1;
    int result = 0;
    while (l < r){
        // If current left and current
        // right have sum smaller than x,
        // the all elements from l+1 to r
        // form a pair with current l.
        if (arr[l] + arr[r] < x){
            result += (r - l);
            l++;
        }
        // Move to smaller value
        else
            r--;
    }
    return result;
}]


/********************************************************************************************/


                               [SLIDING WINDOW + TWO POINTER]

[Problem Link:-https://practice.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
Solution:-
class Solution{
 public:
    long maximumSumSubarray(int k, vector<int> &a , int n){
        long l=0,r=0;
        long sum=0,finalSum=0;
        for(long r=0;r<n;r++){
            sum+=a[r];
            while(r-l>=k){
                sum-=a[l];
                l++;
            }
            finalSum=max(finalSum,sum);
        }
        return finalSum;
    }
}]


   /********************************************************************************************/


   [Problem Link:-https://practice.geeksforgeeks.org/problems/longest-k-unique-characters-substring0853/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
   Solution:-
    class Solution{
  public:
    int longestKSubstr(string s, int k) {
    int n=s.size();
    unordered_map<char,int> ump;
    int lenth=-1;
    int l=0;
    for(int r=0;r<n;r++){
         ump[s[r]]++;
        if(ump.size()==k){
            lenth=max(lenth,r-l+1);
        }
        while(ump.size()>k){
            ump[s[l]]--;
            if(ump[s[l]]==0){
                ump.erase(s[l]);
            }
            l++;
        }
    }
    return lenth;
    };]


    /********************************************************************************************/


    [Problem Link:-https://practice.geeksforgeeks.org/problems/count-number-of-substrings4528/1
    Solution:-
    class Solution
{
  public:
   long long int substrCount (string s, int k) {
    	long long int out = 0 ;
    	int n = s.length() ;
    	int low=-1 , high=-1 ;
    	vector<int> lowchar(26,0);int lowcnt=0 ;
    	vector<int> highchar(26,0);int highcnt=0 ;
    	for(int i=0 ; i<n ; i++){
    	    while(low < n && lowcnt < k){
    	        low++ ;
    	        lowchar[s[low]-'a']++ ;
    	        if(lowchar[s[low]-'a']==1) lowcnt++ ;
    	    }
    	    while(high < n && highcnt <= k){
    	        high++ ;
    	        highchar[s[high]-'a']++ ;
    	        if(highchar[s[high]-'a']==1) highcnt++ ;
    	    }
    	    out += (high-low) ;
    	    //cout << low << ' ' << high << endl ;
    	    lowchar[s[i]-'a']-- ;
    	    if(lowchar[s[i]-'a']==0) lowcnt-- ;
    	    highchar[s[i]-'a']-- ;
    	    if(highchar[s[i]-'a']==0) highcnt-- ;
    	}
    	return out ;
    }
};
    ]